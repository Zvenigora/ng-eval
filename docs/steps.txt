Zvenigora libs

1. Create empty workspace

npx create-nx-workspace


√ Where would you like to create your workspace? · zvenigora
√ Which stack do you want to use? · none
√ Package-based monorepo, integrated monorepo, or standalone project? · integrated
√ Enable distributed caching to make your CI faster · No

1.1 Start new branch 0.1.x

1.2 Add Angular plugin

npm install -D @nx/angular

2. Add publishable Angular library

	eval-core

2.1 Add Acorn

npm install acorn

3. Add actual services

	npx nx generate @schematics/angular:service base-eval --project=eval-core --path=modules/eval-core/src/lib/actual/services --no-interactive
	npx nx generate @schematics/angular:service parser    --project=eval-core --path=modules/eval-core/src/lib/actual/services --no-interactive
	npx nx generate @schematics/angular:service eval      --project=eval-core --path=modules/eval-core/src/lib/actual/services --no-interactive
	npx nx generate @schematics/angular:service compiler  --project=eval-core --path=modules/eval-core/src/lib/actual/services --no-interactive

4. Add internal services

	npx nx generate @schematics/angular:service eval      --project=eval-core --path=modules/eval-core/src/lib/actual/services --no-interactive

ToDo:
  - add tests to Parser service
  - add cache support
  - add error handling
  - add logging
  - add documentation
  - add CI/CD

5. Add registry, stack, queue and scope

  --npx nx generate @schematics/angular:library registry --directory=eval-core --importPath=@zvenigora/eval-core/registry --no-interactive

  nx g @schematics/angular:class --name=base-registry --project=eval-core --path=modules/eval-core/src/lib/internal/classes
  nx g @schematics/angular:class --name=case-insensitive-registry --project=eval-core --path=modules/eval-core/src/lib/internal/classes
  nx g @schematics/angular:class --name=registry --project=eval-core --path=modules/eval-core/src/lib/internal/classes
  nx g @schematics/angular:class --name=scope-registry --project=eval-core --path=modules/eval-core/src/lib/internal/classes

  nx g @schematics/angular:interface --name=stack-type --project=eval-core --path=modules/eval-core/src/lib/internal/interfaces
  nx g @schematics/angular:class --name=stack --project=eval-core --path=modules/eval-core/src/lib/internal/classes

  nx g @schematics/angular:interface --name=queue-type --project=eval-core --path=modules/eval-core/src/lib/internal/interfaces
  nx g @schematics/angular:class --name=queue --project=eval-core --path=modules/eval-core/src/lib/internal/classes

6. install acorn-walk

npm install acorn-walk

7. create Discovery service

npx nx generate @schematics/angular:service discovery    --project=eval-core --path=modules/eval-core/src/lib/actual/services --no-interactive

8. install js-sha256

npm install js-sha256

9. create Cache class

nx g @schematics/angular:class --name=cache --project=eval-core --path=modules/eval-core/src/lib/internal/classes
nx g @schematics/angular:interface --name=cache-type --project=eval-core --path=modules/eval-core/src/lib/internal/interfaces

10. create EvalContext, EvalOptions, EvalResult, EvalStack, EvalQueue, EvalScope classes

nx g @schematics/angular:class --name=EvalContext --project=eval-core --path=modules/eval-core/src/lib/actual/classes
nx g @schematics/angular:class --name=EvalOptions --project=eval-core --path=modules/eval-core/src/lib/actual/classes
nx g @schematics/angular:class --name=EvalResult --project=eval-core --path=modules/eval-core/src/lib/actual/classes
nx g @schematics/angular:class --name=EvalState --project=eval-core --path=modules/eval-core/src/lib/actual/classes

